name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      
      qdrant:
        image: qdrant/qdrant:v1.7.3
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 40

    steps:
    - uses: actions/checkout@v4
    
    - name: Start services with docker-compose
      run: |
        docker compose -f Backend/docker-compose.yml up --build -d

    - name: Wait for Qdrant to be ready (compose)
      run: |
        echo "Waiting for Qdrant (compose)..."
        READY=0
        for i in {1..60}; do
          if curl -sSf http://localhost:6333/health > /dev/null 2>&1; then
            echo "Qdrant is ready!"
            READY=1
            break
          fi
          echo "Attempt $i/60: Qdrant not ready yet, waiting 5s..."
          sleep 5
        done

        if [ "$READY" -ne 1 ]; then
          echo "Qdrant did not become healthy. Showing logs:"
          docker compose -f Backend/docker-compose.yml logs qdrant --no-color || true
          docker ps -a --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}" || true
          exit 1
        fi

    - name: Run tests inside `api` service container (compose)
      run: |
        docker compose -f Backend/docker-compose.yml exec -T api bash -lc "pytest tests/unit -v --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing && pytest tests/integration -v --cov=app --cov-append --cov-report=xml:coverage.xml --cov-report=term-missing && pytest --cov=app --cov-report=html --cov-report=term-missing || true"

    - name: Tear down docker-compose stack
      if: always()
      run: |
        docker compose -f Backend/docker-compose.yml down -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./Backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
